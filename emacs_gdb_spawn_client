#!/bin/bash

function __get_rank() {
  local _rank=-1
  if [ "x$OMPI_COMM_WORLD_RANK" != "x" ];then # OpenMPI
    _rank=${OMPI_COMM_WORLD_RANK}
  elif [ "x$PMI_RANK" != "x" ]; then # MPICH 2
    _rank=${PMI_RANK}
  elif  [ "x$SLURM_PROCID" != "x" ]; then # slurm
    _rank=${SLURM_PROCID}
  else
    # echo "MPI implementation not detected"
    exit 1
  fi
  echo $_rank
}

function __wait() {
  while [ -e /proc/$1 ]
  do
    sleep .6
  done
}

_rank=$(__get_rank)

echo "${_rank}: arguments $*"

_rank_of_interest=0
_server=emacs
_ppid=
_autorun=
_frame=
_wd=
_tmpdir=
_gdbinit=
while getopts "p:t:w:n:s:x:fa" opt; do
  case $opt in
    a)
      _autorun="-ex run"
      ;;
    f)
      _frame="-c"
      ;;
    n)
      _rank_of_interest=$OPTARG
      ;;
    p)
      _ppid=$OPTARG
      ;;
    s)
      _server=$OPTARG
      ;;
    t)
      _tmpdir=$OPTARG
      ;;
    w)
      _wd=$OPTARG
      ;;
    x)
      _gdbinit="$OPTARG"
      ;;
  esac
done

shift $(( $OPTIND - 1 ))

_exe=$1
shift

_fullname=$(readlink -f ${_exe})
if [ "x${_wd}" == "x" ]; then
  _wd=$(dirname ${_fullname})
fi
_name=$(basename ${_fullname})

# Setting the environment file for gdb to know about MPI
_tmp="${_tmpdir}/${_name}_--$_rank--"
printenv -0 | grep -vz TERM | grep -vz BASH_FUNC | xargs -0 -I '{}' -- echo "set environment {}" > "${_tmp}"
_log="${_tmpdir}/log_${_rank}"

_gdbinit_new=${_gdbinit/<rank>/${_rank}}
echo "${_rank}: ${_gdbinit_new} (${_gdbinit})"
if [ ! -e ${_gdbinit_new} ]; then
   _gdbinit="-x ${_gdbinit/<rank>/}"
elif [ "x${_gdbinit_new}" != "x" ]; then
  _gdbinit="-x ${_gdbinit_new}"
fi

# Spawning the clients
if [ ${_rank} -eq ${_rank_of_interest} ] ; then
  # master
  if [ "x${_gdbinit}" = "x" ]; then
    _gdbinit="-ex start"
  fi
  emacsclient ${frame} -s ${_server} -e "(gud-gdb \"gdb --fullname -ix ${_tmp} ${_gdbinit} -cd ${_wd} -args ${_fullname} $*\")" 2>&1 > ${_log}
else
  # slaves
  emacsclient -s ${_server} -e "(gud-gdb \"gdb --fullname -ix ${_tmp} ${_gdbinit} ${_autorun} -cd ${_wd} -args ${_fullname} $*\")" 2>&1 > ${_log}
fi

sleep 1


# Finding the GDB pid
if [ ! \( ${_rank} -eq ${_rank_of_interest} -a "x${frame}" != "x" \) ]; then
  sleep 1
  echo "${_rank} ps --ppid ${_ppid} -f --cols 2000 | grep -e \"gdb --fullname -ix .*${_tmp} \" | awk \'{ print $2; }\'"
  _pid=$(ps --ppid ${_ppid} -f --cols 2000 | grep -e "gdb --fullname -ix .*${_tmp} " | awk '{ print $2; }')

  # some cleaning up
  trap "echo ${_rank} kill ${_pid}: TRAP; kill -9 ${_pid}; exit 1" ABRT TERM KILL INT QUIT ERR

  # wait for gdb to finish
  echo "$_rank: Waiting for gdb (${_pid}:${_ppid}) [gdb --fullname -ix ${_tmp}]"
  __wait $_pid
fi
